{

# macros that translate directly to builtin commands (but know the amount of arguments)
!putchar(c){c .putchar}
!add(a b){a b .add}
!mult(a b){a b .mult}
!div(a b){a b .div}
!mod(a b){a b .mod}
!bitand(a b){a b .bitand}
!bitor(a b){a b .bitor}
!shiftup(a b){a b .shiftup}
!exit(code){code .exit}
!jumpifz(condition to){condition to .jumpifz}
!setstack(to){to .setstack}
!not(a){a .not}
!moveto(value ptr){value ptr .moveto}
!memmove(amount src dest){amount src dest .memmove}


# macros that almost translate directly to builtins
!minus(val){val .neg}
!isnegative(a){a .negative}
!deref (ptr) {ptr .movefrom}
!setref(ptr value){
	ptr
	value
	.swap
	.moveto
}
!dup2 {
	.dup
	.dup
	.drop
	.drop
	.drop
	.dup
	.undrop
	.swap
	.undrop
}
!jump(to){jumpifz(0 to)}
!jumpif(condition to) jumpifz(not(condition) to)

# other macros

!macrovar(label){
	# a space of memory in the middle of the code that can be used as a global variable
	.push
	label
	[0]
	.drop
}
!dupsecond {
	.swap
	.dup
	.drop
	.swap
	.undrop
}
!dowhile (body condition)(:whilestart) {
	:whilestart
	body
	jumpifz(not(condition) whilestart)
}
!if(condition body)(:ifend) {
	jumpifz(condition ifend)
	body
	:ifend
}
!and(a b) (:end){
	a
	jumpifz(.dup end)
	.drop
	b
	:end
}
!or(a b) (:end){
	a
	jumpif(.dup end)
	.drop
	b
	:end
}
!ifelse(condition ifbody elsebody)(:elsepart :ifend) {
	jumpifz(condition elsepart)
	ifbody
	jump(ifend)
	:elsepart
	elsebody
	:ifend
}
!while (condition body) {
	if(condition {
		dowhile (body condition)
	})
}
!sub(a b){
	add(a minus(b))
}
!lt (left right){
	isnegative(sub(left right))
}
!gt(left right){
	left
	right
	.swap
	isnegative(sub({ } { }))
}
!leq(left right){
	not(gt(left right))
}
!geq(left right){
	not(lt(left right))
}
!neq(a b){
	sub(a b)
}
!eq (a b){
	not(sub(a b))
}
!varptr(id) {
	add(deref(@funcmem) id)
}
!setvar(id value){
	setref(varptr(id) value)
}
!getvar(id){
	deref(varptr(id))
}

!addto (pos val){
	setref(pos add(deref(.dup) val))
}
!calls(fun)(:returnpos){
	returnpos
	jump(fun)
	:returnpos
}
!call(fun args){
	args
	calls(fun)
}
!function(label nargs nvars body){
	label
	# remember old stack location
	deref(@funcmem)
	
	# remember current stack location
	.getstack
	@funcmem
	.moveto
	
	# remember argument number
	nargs
	# remember number of local variables
	nvars
	
	# reserve space for local variables
	.dup
	.getstack
	.add
	.setstack
	.drop
	# execute function body
	body
	
	returns
}
!endfunc()(:memtmp :returntmp){
	macrovar(:memtmp)
	macrovar(:returntmp)
	# store old stack and old mem location location in temporary globals
	setref(memtmp getvar(-1))
	setref(@calltmp getvar(-2))
	#calculate and store amount of return values
	.getstack
	minus(add(add(deref(@funcmem) getvar(1)) 2))
	.add
	returntmp
	.moveto
	
	# move return values to top of regular stack
	# source location start
	.getstack
	minus(deref(returntmp))
	.add
	# amount of return values
	deref(returntmp)
	.swap
	# destination location start
	sub(deref(@funcmem) add(getvar(0) 2))
	# remember destination location for later (because getvar(0) might get overwritten)
	.dup
	@funcmem
	.moveto
	# actually move the return values
	.memmove
	
	# move stack to end of return values
	setstack(add(deref(@funcmem) deref(returntmp)))
	
	# recall old stack location
	setref(@funcmem deref(memtmp))
}
!returns {
	endfunc
	# return to previous position
	jump(deref(@calltmp))
}
!return(val){
	val
	returns
}
!tailcalls(fun){
	endfunc
	deref(@calltmp)
	jump(fun)
}
!tailcall(fun val){
	val
	tailcalls(fun)
}
!arrset(arr index val){
	setref(add(arr index) val)
}
!arrget(arr index){
	deref(add(arr index))
}
!print(string)(:stringstart :stringend){
	stringstart
	while( neq(.dup stringend) {
		putchar(deref(.dup))
		add({ } 1)
	})
	jump(stringend)
	:stringstart
	string
	:stringend
	.drop
}
!println(string){
	print(string)
	putnl
}
!putint(val)(:end){
	val
	if(not(.dup){
		putchar(48)
		.drop
		jump(end)
	})
	if(isnegative(.dup){
		putchar(45)
		.neg
	})
	0
	.swap
	while(.dup {
		add(mod(.dup 10) 48)
		.swap
		div({ } 10)
	})
	.drop
	while(.dup {
		.putchar
	})
	.drop
	:end
}
!printmem(ptr size){
	ptr
	size
	dup2
	.add
	.swap
	.drop
	.swap
	while(neq(dup2 { }) {
		putchar(deref(.dup))
		add({ } 1)
	})
	.drop
	.drop
}
!printint(val){
	val
	putchar(40)
	putint({ })
	putchar(41)
}
!putnl putchar('\n)


# actual code part

# some initializer metadata
[
0
@codestart # initial location of the code pointer
@codeend # initial location of the stack pointer
]

# place where the code starts executing
:codestart
addto(@heapstart 4096) # reserve 4096 words space for the stack
setref(@heapend deref(@heapstart))

# end with as exit code the return value from main
exit(call(@main { }))



!mallocnew(amount) (:end){
	add(2 deref(@heapend)) # the eventual return value
	macrovar(:end)
	setref(end add(add(amount 3) deref(@heapend)))
	setref(deref(@heapend) deref(end))
	arrset(deref(@heapend) 1 0)
	arrset(deref(end) -1 deref(@heapend))
	setref(@heapend deref(end))
}
!calcfreeblocklist(size)(){
	size
	ifelse(leq(.dup 6)
		@freeblocks_to6
		ifelse(leq(.dup 10)
			@freeblocks_to10
			ifelse(leq(.dup 100)
				@freeblocks_to100
				@freeblocks_rest
			)
		)
	)
	.swap
	.drop
}
!addfreedblock(start_) (:start :blocklist) {
	macrovar(:start)
	setref(start start_)
	macrovar(:blocklist)
	setref(blocklist calcfreeblocklist(sub(deref(deref(start)) deref(start))))
	# add to front of list of free blocks
	arrset(deref(start) 1 deref(@freeblocks_to6))
	arrset(deref(start) 2 add(@freeblocks_to6 -1))
	arrset(deref(@freeblocks_to6) 2 deref(start))
	setref(@freeblocks_to6 deref(start))
}
!malloc(amount_)(:amount :heapptr :next :end :macroend){
	macrovar(:amount)
	setref(amount amount_)
	macrovar(:heapptr)
	macrovar(:next)
	macrovar(:end)
	if (lt(deref(amount) 1)
		# minimum size of a block is 4 words (3 meta words + 1 data word)
		setref(amount 1)
	)
	setref(heapptr deref(calcfreeblocklist(add(deref(amount) 3))))
	while(neq(deref(heapptr) @endblock) { # loop over all chunks
		if(arrget(deref(heapptr) 1) { # chunk is free
			setref(next deref(deref(heapptr)))
			setref(end add(add(deref(heapptr) deref(amount)) 3))
			if(leq(deref(end) deref(next)) {
				# enough free space found!
				
				!nextinlist arrget(deref(heapptr) 1)
				!previnlist arrget(deref(heapptr) 2)
				arrset(previnlist 1 nextinlist)
				arrset(nextinlist 2 previnlist)
				if(geq(sub(deref(next) deref(end)) 4) {
					# still a significant free space behind this block
					# add a new free chunk
					arrset(deref(end) 0 deref(next))
					arrset(deref(next) -1 deref(end))
					setref(next deref(end))
					addfreedblock(deref(end))
				})
				# claim this block
				arrset(deref(heapptr) 0 deref(next))
				arrset(deref(heapptr) 1 0)
				arrset(deref(next) -1 deref(heapptr))
				add(deref(heapptr) 2)
				jump(macroend)
			})
		})
		setref(heapptr arrget(deref(heapptr) 1))
	})
	# no free chunk found that's large enough; allocate some new memory
	mallocnew(deref(amount))
	:macroend
}
!allocatedsize(alloc_ptr) (:allocptr){
	macrovar(:allocptr)
	setref(allocptr alloc_ptr)
	add(-1 sub(arrget(deref(allocptr) -2) deref(allocptr)))
}
!free(ptr_) (:start :end){
	macrovar(:start)
	macrovar(:end)
	setref(start add(ptr_ -2))
	setref(end deref(deref(start)))
	if (and(neq(deref(end) deref(@heapend)) arrget(deref(end) 1)) {
		# next block is free
		# remove next block from list of free blocks
		!nextinlist arrget(deref(end) 1)
		!previnlist arrget(deref(end) 2)
		arrset(previnlist 1 nextinlist)
		arrset(nextinlist 2 previnlist)
		# merge with next block
		setref(end deref(deref(end)))
		setref(deref(start) deref(end))
		arrset(deref(end) -1 deref(start))
	})
	if(and(neq(deref(start) deref(@heapstart)) arrget(arrget(deref(start) -1) 1)){
		# previous block is free
		# merge with previous block
		setref(start arrget(deref(start) -1))
		
		# remove next block from list of free blocks
		!nextinlist arrget(deref(start) 1)
		!previnlist arrget(deref(start) 2)
		arrset(previnlist 1 nextinlist)
		arrset(nextinlist 2 previnlist)
		
		setref(deref(start) deref(end))
		arrset(deref(end) -1 deref(start))
	})
	addfreedblock(deref(start))
}
!realloc(ptr_ amount_) (:ptr :amount :new :oldamount){
	macrovar(:ptr)
	setref(ptr ptr_)
	macrovar(:amount)
	setref(amount amount_)
	macrovar(:new)
	macrovar(:oldamount)
	setref(new deref(ptr))
	setref(oldamount allocatedsize(deref(ptr)))
	if(gt(deref(amount) deref(oldamount)) {
		setref(new malloc(deref(amount)))
		memmove(deref(oldamount) deref(ptr) deref(new))
		free(deref(ptr))
	})
	deref(new)
}



!vecnew{
	malloc(3)
	setref(.dup 0)
	arrset(.dup 1 8)
	arrset(.dup 2 malloc(8))
	
}

function(:vecappend 2 0 {
	!vec -4
	!val -3
	if(eq(deref(getvar(vec)) arrget(getvar(vec) 1)) {
		arrset(getvar(vec) 1 mult(arrget(getvar(vec) 1) 2))
		arrset(getvar(vec) 2 realloc(arrget(getvar(vec) 2) arrget(getvar(vec) 1)))
	})
	arrset(arrget(getvar(vec) 2) deref(getvar(vec)) getvar(val))
	addto(getvar(vec) 1)
})
!vecappend(vec val){call(@vecappend {vec val})}
!vecget(vec idx){arrget(arrget(vec 2) idx)}
!vecset(vec idx val){arrset(arrget(vec 2) idx val)}
!veclength(vec){deref(vec)}
function(:vecclone 1 2 {
	!vec -3
	!index 2
	!new 3
	setvar(index 0)
	setvar(new vecnew)
	while(neq(getvar(index) veclength(getvar(vec))){
		vecappend(getvar(new) vecget(getvar(vec) getvar(index)))
		addto(varptr(index) 1)
	})
	getvar(new)
})
!vecclone(vec) call(@vecclone vec)
!printstr(vecstr){
	vecstr
	.dup
	arrget({ } 2)
	.swap
	.movefrom
	printmem({ } { })
}

function(:mapgetidx 2 1 {
	!map -4
	!key -3
	!index 2
	setvar(index 0)
	while(neq(getvar(index) veclength(getvar(map))){
		if (eq(getvar(key) vecget(getvar(map) mult(getvar(index) 2))) {
			return(getvar(index))
		})
		addto(varptr(index) 2)
	})
	return(-1)
})
!mapgetidx(map key) call(@mapgetidx {map key})
function(:mapget 3 1 {
	!map -5
	!key -4
	!default -3
	!index 2
	setvar(index mapgetidx(getvar(map) getvar(key)))
	ifelse(isnegative(getvar(index))
		default
		vecget(getvar(map) mult(getvar(index) 2))
	)
})
!mapget(map key default) call(@mapget {map key default})
function(:mapset 3 1 {
	!map -5
	!key -4
	!value -3
	!index 2
	setvar(index mapgetidx(getvar(map) getvar(key)))
	ifelse(isnegative(index){
		vecappend(getvar(map) getvar(key))
		vecappend(getvar(map) getvar(value))
	} {
		vecset(map add(mult(getvar(index) 2) 1) getvar(value))
	})
})
!mapget(map key value) call(@mapget {map key value})


function(:readinput 0 4 {
	!text 2
	!char 3
	setvar(text vecnew())
	setvar(char .getchar)
	while(not(isnegative(getvar(char))){
		vecappend(getvar(text) getvar(char))
		setvar(char .getchar)
	})
	getvar(text) # return a linked list of letters
})

!Token_ident 'I
!Token_num 'N
!Token_str 'S
!Token_macro '!

!isspace(char) or(or(or(eq(char '\t) eq(char '\n)) eq(char '\r)) eq(char ' ))
!isalpha(char) or(and(geq(char 'A) leq(char 'Z)) and(geq(char 'a) leq(char 'z)))
!isidentchar(char) or(isalpha(char) eq(char '_))
!isdecimal(char) and(geq(char '0) leq(char '9))


function(:tokenize 4 4 {
	!letters -6
	!index -5
	!linenum -4
	!parsed -3
	!char 2
	!token 3
	!numvalue 4
	!textvalue 5
	
	!callnext tailcall(@tokenize {getvar(letters) getvar(index) getvar(linenum) getvar(parsed)})
	!notatend neq(getvar(index) veclength(getvar(letters)))
	!nextchar vecget(getvar(letters) getvar(index))
	!maketoken(type value){
		malloc(3)
		arrset(.dup 0 type)
		arrset(.dup 1 value)
		arrset(.dup 2 getvar(linenum))
	}
	
	if(not(notatend) {
		return(getvar(parsed))
	})
	setvar(char nextchar)
	addto(varptr(index) 1)
	if(isspace(getvar(char)) {
		if(eq(getvar(char) '\n)
			addto(varptr(linenum) 1)
		)
		callnext
	})
	if(eq(getvar(char) '#) {
		# start of a comment
		while(and(
			notatend
			neq(getvar(char) '\n) # end of a comment
		){
			setvar(char nextchar)
			addto(varptr(index) 1)
		})
		addto(varptr(linenum) 1)
		callnext
	})
	if(isdecimal(getvar(char)) {
		# positive number
		setvar(numvalue sub(getvar(char) '0))
		while( and(notatend isdecimal(nextchar)) {
			setvar(char nextchar)
			setvar(numvalue mult(getvar(numvalue) 10))
			addto(varptr(numvalue) sub(getvar(char) '\n))
			addto(varptr(index) 1)
		})
		vecappend(getvar(parsed) maketoken(Token_num getvar(numvalue)))
		callnext
	})
	if(and(eq(getvar(char) 45) and(notatend isdecimal(nextchar))) {
		# negative number
		setvar(numvalue add(getvar(char) 0))
		while( and(notatend isdecimal(nextchar)) {
			#setvar(char nextchar)
			setvar(numvalue mult(getvar(numvalue) 10))
			addto(varptr(numvalue) sub(nextchar '0))
			addto(varptr(index) 1)
		})
		setvar(numvalue minus(getvar(numvalue)))
		vecappend(getvar(parsed) maketoken(Token_num getvar(numvalue)))
		callnext
	})
	if(isidentchar(getvar(char)) {
		setvar(textvalue vecnew)
		vecappend(getvar(textvalue) getvar(char))
		while(and(notatend or(isidentchar(nextchar) isdecimal(nextchar))) {
			vecappend(getvar(textvalue) nextchar)
			addto(varptr(index) 1)
		})
		vecappend(getvar(parsed) maketoken(Token_ident getvar(textvalue)))
		callnext
	})
	if(or(or(or(or(or( eq(getvar(char) '() eq(getvar(char) '))) eq(getvar(char) '[)) eq(getvar(char) '])) eq(getvar(char) '{)) eq(getvar(char) '})){ # brackets or exclamation mark
		vecappend(getvar(parsed) maketoken(getvar(char) getvar(char)))
		callnext
	})
	if(or(or(or(eq(getvar(char) ':) eq(getvar(char) '@)) eq(getvar(char) '.)) eq(getvar(char) '!)) {
		setvar(textvalue vecnew)
		while(and(notatend isidentchar(nextchar)) {
			vecappend(getvar(textvalue) nextchar)
			addto(varptr(index) 1)
		})
		vecappend(getvar(parsed) maketoken(getvar(char) getvar(textvalue)))
		callnext
	})
	
	!tokenize_char {
		ifelse (eq(nextchar '\\) {
			addto(varptr(index) 1)
			if(not(notatend){
				jump(@tokenizeEndTooEarly)
			})
			ifelse (eq(nextchar 'n)
				'\n
				ifelse (eq(nextchar 't)
					'\t
					nextchar
				)
			)
		} {
			nextchar
		})
	}
	if(eq(getvar(char) '') {
		if (eq(nextchar '\n)
			addto(varptr(linenum) 1)
		)
		if(not(notatend){
			jump(@tokenizeEndTooEarly)
		})
		vecappend(getvar(parsed) maketoken(Token_num tokenize_char))
		addto(varptr(index) 1)
		callnext
	})
	if(eq(getvar(char) '"){
		setvar(textvalue vecnew)
		while(neq(nextchar '"){
			if(not(notatend){
				jump(@tokenizeEndTooEarly)
			})
			vecappend(getvar(textvalue) tokenize_char)
			addto(varptr(index) 1)
		})
		addto(varptr(index) 1)
		vecappend(getvar(parsed) maketoken(Token_str getvar(textvalue)))
		callnext
	})
	print("unknown token: '")
	putchar(getvar(char))
	print("'")
	printint(getvar(char))
	print(" on line ")
	putint(getvar(linenum))
	putnl
	exit(-1)
	:tokenizeEndTooEarly
	print("input ended unexpectedly during tokenization")
	exit(-1)
})
!tokenize(letters) call(@tokenize {letters 0 1 vecnew})

function(:parse 2 6 {
	!tokens -4
	!index -3
	!token 2
	!node 3
	!args 4
	!text 4
	!labels 5
	!i 5
	!body 6
	
	!notatend neq(getvar(index) veclength(getvar(tokens)))
	!isatend not(notatend)
	!checkend(message) {
		if(isatend {
			print(message)
			print(" on line ")
			putint(arrget(getvar(token) 2))
			putnl
			jump(@parseEndTooEarly)
		})
	}
	!nexttoken vecget(getvar(tokens) getvar(index))
	!typ deref(getvar(token))
	!callself {
		call(@parse{getvar(tokens) getvar(index)})
		moveto({ } varptr(index))
	}
	
	if (isatend {
		println("expected command but token stream ended")
		jump(@parseEndTooEarly)
	})
	setvar(token vecget(getvar(tokens) getvar(index)))
	addto(varptr(index) 1)
	
	if (eq(typ Token_ident) {
		setvar(args vecnew)
		if(eq(deref(nexttoken) '() {
			addto(varptr(index) 1)
			while(neq(deref(nexttoken) ')) {
				vecappend(getvar(args) callself)
				checkend("no closing tag for macro call")
			})
			addto(varptr(index) 1)
		})
		setvar(node malloc(6))
		arrset(getvar(node) 0 'C)
		arrset(getvar(node) 1 arrget(getvar(token) 1))
		arrset(getvar(node) 2 getvar(args))
		arrset(getvar(node) 5 arrget(getvar(token) 2))
		return({getvar(node) getvar(index)})
	})
	if (eq(typ Token_macro) {
		setvar(args vecnew)
		checkend("macro has no body")
		if(eq(deref(nexttoken) '() {
			addto(varptr(index) 1)
			while(neq(deref(nexttoken) ')){
				# todo: validate token type
				vecappend(getvar(args) arrget(nexttoken 1))
				addto(varptr(index) 1)
				checkend("no closing tag for macro args")
			})
			addto(varptr(index) 1)
			checkend("macro has no body")
		})
		setvar(labels vecnew)
		if(eq(deref(nexttoken) '() {
			addto(varptr(index) 1)
			while(neq(deref(nexttoken) ')){
				# todo: validate token type
				vecappend(getvar(labels) arrget(nexttoken 1))
				addto(varptr(index) 1)
				checkend("no closing tag for macro labels")
			})
			addto(varptr(index) 1)
			checkend("macro has no body")
		})
		setvar(body callself)
		setvar(node malloc(6))
		arrset(getvar(node) 0 '!)
		arrset(getvar(node) 1 arrget(getvar(token) 1))
		arrset(getvar(node) 2 getvar(args))
		arrset(getvar(node) 3 getvar(labels))
		arrset(getvar(node) 4 getvar(body))
		arrset(getvar(node) 5 arrget(getvar(token) 2))
		return({getvar(node) getvar(index)})
	})
	if(eq(typ '{) {
		setvar(body vecnew)
		while(neq(deref(nexttoken) '}){
			vecappend(getvar(body) callself)
			checkend("no closing tag for code block")
		})
		addto(varptr(index) 1)
		setvar(node malloc(6))
		arrset(getvar(node) 0 'B)
		arrset(getvar(node) 1 getvar(body))
		arrset(getvar(node) 5 arrget(getvar(token) 2))
		return({getvar(node) getvar(index)})
	})
	if (or(or(or(eq(typ '.) eq(typ ':)) eq(typ '@)) eq(typ 'N)){
		setvar(node malloc(6))
		arrset(getvar(node) 0 typ)
		arrset(getvar(node) 1 arrget(getvar(token) 1))
		arrset(getvar(node) 5 arrget(getvar(token) 2))
		return({getvar(node) getvar(index)})
	})
	if (eq(typ 'S) {
		setvar(body vecnew)
		setvar(i 0)
		setvar(text arrget(getvar(token) 1))
		while(neq(getvar(i) veclength(getvar(text))){
			vecappend(getvar(body) 'L)
			vecappend(getvar(body) vecget(getvar(text) i))
			addto(varptr(i) 1)
		})
		setvar(node malloc(6))
		arrset(getvar(node) 0 'R)
		arrset(getvar(node) 1 getvar(body))
		arrset(getvar(node) 5 arrget(getvar(token) 2))
		return({getvar(node) getvar(index)})
	})
	if (eq(typ '[){
		setvar(body vecnew)
		while(neq(deref(nexttoken) ']){
			if(eq(deref(nexttoken) 'N){
				vecappend(getvar(body) 'L)
				vecappend(getvar(body) arrget(nexttoken 1))
			})
			if(eq(deref(nexttoken) '@){
				vecappend(getvar(body) '@)
				vecappend(getvar(body) arrget(nexttoken 1))
			})
			if(eq(deref(nexttoken) ':){
				vecappend(getvar(body) ':)
				vecappend(getvar(body) arrget(nexttoken 1))
			})
			addto(varptr(index) 1)
			checkend("no closing tag for raw block")
		})
		addto(varptr(index) 1)
		setvar(node malloc(6))
		arrset(getvar(node) 0 'R)
		arrset(getvar(node) 1 getvar(body))
		arrset(getvar(node) 5 arrget(getvar(token) 2))
		return({getvar(node) getvar(index)})
	})
	print("Unknown token type ")
	putchar(typ)
	printint(typ)
	putnl
	
	:parseEndTooEarly
	print("Parsing failed")
	#print("unexpected end of token list encountered")
	exit(-1)
})
!parse(tokens) {
	call(@parse {tokens 0})
	.drop
}

function (:main 0 5 {
	!input 2
	!tokens 3
	!i 4
	!ast 5
	setvar(input call(@readinput { }))
	#call(@readinput { })
	#input
	#.moveto
	#printstr(getvar(input))
	putnl
	setvar(tokens tokenize(getvar(input)))
	setvar(i 0)
	while(neq(getvar(i) veclength(getvar(tokens))) {
		putchar(arrget(vecget(getvar(tokens) getvar(i)) 0))
		putchar(' )
		addto(varptr(i) 1)
	})
	putnl
	print("number of tokens: ")
	printint(veclength(getvar(tokens)))
	putnl
	setvar(ast parse(getvar(tokens)))
	print("ast type: ")
	putchar(deref(getvar(ast)))
	putnl
	0
})
# some extra space of memory
# this is used for global constants and variables
[0]
:scopeid # used by the compiler to keep assigning new unique scopes
[1 0]


[0]
:freeblocks_to6 # start of a linked list of free heap blocks
[@endblock 0 0]
[0]
:freeblocks_to10 # start of a linked list of free heap blocks
[@endblock 0 0]
[0]
:freeblocks_to100 # start of a linked list of free heap blocks
[@endblock 0 0]
[0]
:freeblocks_rest # start of a linked list of free heap blocks
[@endblock 0 0]

:endblock
[0 0 0 0]
:heapstart # pointer to the first address that is used for heap memory
[@codeend]
:heapend # pointer to the first address that is not part of the used heap
[@codeend]
:funcmem # pointer to the location of the function arguments and local variables
[0]
:calltmp # hold the previous call frame when the stack is being manipulated
[0]
# the stack begins here
:codeend
[0]
}
