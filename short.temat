{


# macros that translate directly to builtin commands (but know the amount of arguments)
!putchar(c){c .putchar}
!add(a b){a b .add}
!mult(a b){a b .mult}
!div(a b){a b .div}
!mod(a b){a b .mod}
!bitand(a b){a b .bitand}
!bitor(a b){a b .bitor}
!shiftup(a b){a b .shiftup}
!shiftdown(a b){a b .shiftdown}
!exit(code){code .exit}
!jumpifz(condition to){condition to .jumpifz}
!setstack(to){to .setstack}
!not(a){a .not}
!moveto(value ptr){value ptr .moveto}
!memmove(amount src dest){amount src dest .memmove}

# macros that almost translate directly to builtins
!minus(val){val .neg}
!isnegative(a){a .negative}
!deref (ptr) {ptr .movefrom}
!setref(ptr value){
	ptr
	value
	.swap
	.moveto
}
!dup2 {
	.dup
	.dup
	.drop
	.drop
	.drop
	.dup
	.undrop
	.swap
	.undrop
}
!jump(to){jumpifz(0 to)}
!jumpif(condition to) jumpifz(not(condition) to)

# other macros

!ignore(arg) {}
!macrovar(label){
	# a space of memory in the middle of the code that can be used as a global variable
	.push
	label
	[0]
	.drop
}
!dupsecond {
	.swap
	.dup
	.drop
	.swap
	.undrop
}
!dowhile (body condition)(:whilestart) {
	:whilestart
	body
	jumpifz(not(condition) whilestart)
}
!if(condition body)(:ifend) {
	jumpifz(condition ifend)
	body
	:ifend
}
!and(a b) (:end){
	a
	jumpifz(.dup end)
	.drop
	b
	:end
}
!or(a b) (:end){
	a
	jumpif(.dup end)
	.drop
	b
	:end
}
!ifelse(condition ifbody elsebody)(:elsepart :ifend) {
	jumpifz(condition elsepart)
	ifbody
	jump(ifend)
	:elsepart
	elsebody
	:ifend
}
!while (condition body) {
	if(condition {
		dowhile (body condition)
	})
}
!sub(a b){
	add(a minus(b))
}
!lt (left right){
	isnegative(sub(left right))
}
!gt(left right){
	left
	right
	.swap
	isnegative(sub({ } { }))
}
!leq(left right){
	not(gt(left right))
}
!geq(left right){
	not(lt(left right))
}
!neq(a b){
	sub(a b)
}
!eq (a b){
	not(sub(a b))
}
!varptr(id) {
	add(deref(@funcmem) id)
}
!setvar(id value){
	setref(varptr(id) value)
}
!getvar(id){
	deref(varptr(id))
}

!addto (pos val){
	setref(pos add(deref(.dup) val))
}

!print(string)(:stringstart :stringend){
	stringstart
	while( neq(.dup stringend) {
		putchar(deref(.dup))
		add({ } 1)
	})
	jump(stringend)
	:stringstart
	string
	:stringend
	.drop
}
!putnl putchar('\n)

!println(string){
	print(string)
	putnl
}
!putint(val)(:end){
	val
	if(not(.dup){
		putchar(48)
		.drop
		jump(end)
	})
	if(isnegative(.dup){
		putchar(45)
		.neg
	})
	0
	.swap
	while(.dup {
		add(mod(.dup 10) 48)
		.swap
		div({ } 10)
	})
	.drop
	while(.dup {
		.putchar
	})
	.drop
	:end
}
!printint(val){
	val
	putchar(40)
	putint({ })
	putchar(41)
}

!calls(fun)(:returnpos){
	returnpos
	jump(fun)
	:returnpos
}
!call(fun args){
	args
	calls(fun)
}


!endfunc()(:memtmp :returntmp){
	macrovar(:memtmp)
	macrovar(:returntmp)
	# store old stack and old mem location location in temporary globals
	setref(memtmp getvar(-1))
	setref(@calltmp getvar(-2))
	#calculate and store amount of return values
	.getstack
	minus(add(add(deref(@funcmem) getvar(1)) 2))
	.add
	returntmp
	.moveto
	
	# move return values to top of regular stack
	# source location start
	.getstack
	minus(deref(returntmp))
	.add
	# amount of return values
	deref(returntmp)
	.swap
	# destination location start
	sub(deref(@funcmem) add(getvar(0) 2))
	# remember destination location for later (because getvar(0) might get overwritten)
	.dup
	@funcmem
	.moveto
	# actually move the return values
	.memmove
	
	# move stack to end of return values
	setstack(add(deref(@funcmem) deref(returntmp)))
	
	# recall old stack location
	setref(@funcmem deref(memtmp))
}
!returns {
	endfunc
	# return to previous position
	jump(deref(@calltmp))
}

!function(label nargs nvars body){
	label
	# remember old stack location
	deref(@funcmem)
	
	# remember current stack location
	.getstack
	@funcmem
	.moveto
	if(geq(deref(@funcmem) deref(@heapstart)){
		println("Stack Overflow!")
		exit(-1)
	})
	
	# remember argument number
	nargs
	# remember number of local variables
	nvars
	
	# reserve space for local variables
	.dup
	.getstack
	.add
	.setstack
	.drop
	# execute function body
	body
	
	returns
}
!return(val){
	val
	returns
}
!tailcalls(fun){
	endfunc
	deref(@calltmp)
	jump(fun)
}
!tailcall(fun val){
	val
	tailcalls(fun)
}
!arrset(arr index val){
	setref(add(arr index) val)
}
!arrget(arr index){
	deref(add(arr index))
}
!printmem(ptr size){
	ptr
	size
	dup2
	.add
	.swap
	.drop
	.swap
	while(neq(dup2 { }) {
		putchar(deref(.dup))
		add({ } 1)
	})
	.drop
	.drop
}



!log2(n){
	n
	shiftdown(.dup 16)
	ifelse(.dup {
		.swap
		.drop
		shiftdown(.dup 8)
		ifelse(.dup {
			.swap
			.drop
			add(deref(add(@log2table256 {})) 24)
		}{
			.drop
			add(deref(add(@log2table256 {})) 16)
		})
	}{
		.drop
		shiftdown(.dup 8)
		ifelse(.dup {
			.swap
			.drop
			add(deref(add(@log2table256 {})) 8)
		}{
			.drop
			deref(add({} @log2table256))
		})
	})
}







# some initializer metadata
[
1952801396
@codestart # initial location of the code pointer
@codeend # initial location of the stack pointer
]
:codestart
addto(@heapstart 2048)
addto(@heapend 2048)
putint(-1)
putchar('A)
jump(@overstring)

"hello world"

:overstring
putchar('B)
putnl
putchar('C)
call(@main {})
putchar('E)
putnl
exit(0)


function(:main 0 10 {
	putchar('D)
	println("lorum ipsum dolor sit amet")
})


[10 9 8 7 6 5 4 3 2 1]


# some extra space of memory
# this is used for global constants and variables
[0]
:heapstart # pointer to the first address that is used for heap memory
[@codeend]
:heapend # pointer to the first address that is not part of the used heap
[@codeend]
:funcmem # pointer to the location of the function arguments and local variables
[0]
:calltmp # hold the previous call frame when the stack is being manipulated
[0]
:log2table256 # see https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogLookup
!LT(n){n n n n n n n n n n n n n n n n}
[-1 0 1 1 2 2 2 2 3 3 3 3 3 3 3 3]
LT([4]) LT([5]) LT([5]) LT([6]) LT([6]) LT([6]) LT([6])
LT([7]) LT([7]) LT([7]) LT([7]) LT([7]) LT([7]) LT([7]) LT([7])

[0]
# the stack begins here
:codeend
[0]

:codeend



}
